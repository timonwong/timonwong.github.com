<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Timon Wong&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/27eba4a33a317761c17d96f1f009ae49</icon>
  <subtitle>(╯°□°）╯ ┻━┻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://theo.im/"/>
  <updated>2017-10-15T04:41:19.000Z</updated>
  <id>http://theo.im/</id>
  
  <author>
    <name>Timon Wong</name>
    <email>timon86.wang@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决 AWS ELB 偶发的 502 Bad Gateway 错误</title>
    <link href="http://theo.im/blog/2017/10/14/suspicious-502-error-from-elb/"/>
    <id>http://theo.im/blog/2017/10/14/suspicious-502-error-from-elb/</id>
    <published>2017-10-14T15:32:11.000Z</published>
    <updated>2017-10-15T04:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用了 <a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="external">Prometheus</a> 做了 HTTP 协议的监控之后，<a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="external">blackbox_exporter</a> 偶尔会报一些 ProbeDown 的报警，经过检查是 502 Bad Gateway 错误，但此时后端是正常的，只是在 AWS ELB 的监控指标中，看到了 ELB HTTP 5xx 相关错误，因此困扰了一段时间。</p><p>HTTP 数据流向如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Client] --- [ELB] --- [nginx] --- [App Servers]</div></pre></td></tr></table></figure><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><a id="more"></a><p>最开始是怀疑是后端问题，但是查阅了 nginx 和 App servers 的日志，没有任何结果，只是在 ELB 日志里面找到了 502 Bad Gateway 的错误信息。无奈之下甚至怀疑 nginx 所在 EC2 instance 有问题，因此求助了 AWS 技术支持。根据建议，在 nginx 这端做了 tcpdump 抓包，最后终于在 AWS 技术支持的帮助下，定位并解决了问题 🎉。</p><p>先补充一个知识：如果后端支持的话，ELB 会使用保持连接（HTTP persistent/keep-alive connections）。来看看这一个保持连接的 TCP stream：</p><p><img src="http://theo-im.qiniudn.com/images/2017-10-14-tcpdump.png" alt=""></p><p>其中，<code>10.100.2.186</code> 是 ELB 内部 IP，<code>10.100.250.22</code> 是 nginx 服务器内部 IP。这样，可以看到：</p><ul><li>在 76.69 秒时候，连接被创建；</li><li>在 181.69 秒的时候，是最后一次有效请求；</li><li>在 256.69 秒的时候（No.7475），该连接被 nginx 关闭；</li><li>在 256.69 秒的时候，几乎在同时还有一个 HTTP GET 请求（No.7476）；</li><li>由于 nginx 已经关闭连接了，上面的这个请求当然会收到 TCP RST，ELB 无法访问后端服务器，就会返回 502 Bad Gateway 了。</li></ul><p>刚刚过了 75 秒（256.69 - 181.69）连接就被 nginx 关闭了，是不是很眼熟：nginx <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout" target="_blank" rel="external">keepalive_timeout</a> 参数的默认值，恰好就是 75 秒。</p><p>很明显是遇到了 Keep-Alive timeout race 了，而这个问题其实在 HTTP/1.1 下，是不好解决的，只有靠微调降低出现的概率；禁用 Keep-Alive；或者靠 Client 上层处理。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>由于 ELB 并不受我们的控制，所以考虑对后端进行微调。根据不同的场景，可以：</p><ul><li>增加后端服务器持久连接的保持时间，比如 nginx 增加 <code>keepalive_timeout</code> 参数</li><li>禁用 HTTP 持久连接）</li></ul><p>根据<a href="https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340" target="_blank" rel="external">这篇解决 Google Cloud Platform 负载均衡器类似问题的文章</a>，说明我不是一个人😂。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在使用了 &lt;a href=&quot;https://github.com/prometheus/blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prometheus&lt;/a&gt; 做了 HTTP 协议的监控之后，&lt;a href=&quot;https://github.com/prometheus/blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blackbox_exporter&lt;/a&gt; 偶尔会报一些 ProbeDown 的报警，经过检查是 502 Bad Gateway 错误，但此时后端是正常的，只是在 AWS ELB 的监控指标中，看到了 ELB HTTP 5xx 相关错误，因此困扰了一段时间。&lt;/p&gt;
&lt;p&gt;HTTP 数据流向如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Client] --- [ELB] --- [nginx] --- [App Servers]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;排查问题&quot;&gt;&lt;a href=&quot;#排查问题&quot; class=&quot;headerlink&quot; title=&quot;排查问题&quot;&gt;&lt;/a&gt;排查问题&lt;/h2&gt;
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="AWS" scheme="http://theo.im/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>试用最新的 Docker for Mac Beta</title>
    <link href="http://theo.im/blog/2016/05/22/evaluating-new-docker-for-mac-beta/"/>
    <id>http://theo.im/blog/2016/05/22/evaluating-new-docker-for-mac-beta/</id>
    <published>2016-05-22T13:47:02.000Z</published>
    <updated>2017-10-15T04:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>DEPRECATION: 现在 Docker for Mac 已经可以通过界面配置 mirror 了，这片文章作废</p><a id="more"></a><h2 id="如何申请-Docker-for-Mac-Beta"><a href="#如何申请-Docker-for-Mac-Beta" class="headerlink" title="如何申请 Docker for Mac Beta"></a>如何申请 Docker for Mac Beta</h2><p>请访问这个地址申请，可能需要等几天：<a href="https://beta.docker.com/" target="_blank" rel="external">https://beta.docker.com/</a></p><p>Docker for Mac Beta，最大的好处就是不再依赖 VirtualBox VM 了，而是使用了更轻量化的 <a href="https://github.com/mist64/xhyve" target="_blank" rel="external">xhyve</a> 作为其虚拟化方案（也即是说，仍然不是原生的，还是需要虚拟化一个 Linux 出来在上面运行 Docker Daemon）。</p><p>另外，这个版本的 Docker for Mac 使用了 <a href="http://alpinelinux.org/" target="_blank" rel="external">Alpine Linux</a> 发行版，作为一个更轻量化的发行版，与一般的发行版有不少区别，比如，使用 <code>ash</code> 替换 <code>bash</code> 等，具体请访问 <a href="http://alpinelinux.org/" target="_blank" rel="external">Alpine Linux</a> 网站获取更多信息。</p><h2 id="使用-Docker-Hub-Registry-Mirror"><a href="#使用-Docker-Hub-Registry-Mirror" class="headerlink" title="使用 Docker Hub Registry Mirror"></a>使用 Docker Hub Registry Mirror</h2><p>由于众所周知的原因，在国内访问 Docker Hub 的速度相当缓慢，因此需要设置一个 Docker Registry Mirror 来加速，这里使用 <a href="https://servers.ustclug.org/2015/05/new-docker-hub-registry-mirror/" target="_blank" rel="external">USTC 的 Docker Hub Mirror</a>。</p><p>就如同之前所说，<a href="http://alpinelinux.org/" target="_blank" rel="external">Alpine Linux</a> 发行版与一般发行版有巨大区别，因此调整 Docker Daemon 的启动参数也不大一样😂</p><h3 id="Quick-Way"><a href="#Quick-Way" class="headerlink" title="Quick Way"></a>Quick Way</h3><p><strong>NOTE:</strong> 安装了 <code>jq</code> 命令行工具（可以通过 <code>brew install jq</code> 安装），可以直接执行一行命令行搞定，否则请参阅「Slow Way」一节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pinata get daemon | jq -cM <span class="string">'."registry-mirrors" = ["https://docker.mirrors.ustc.edu.cn"]'</span> | pinata <span class="built_in">set</span> daemon -</div></pre></td></tr></table></figure><h3 id="Slow-Way"><a href="#Slow-Way" class="headerlink" title="Slow Way"></a>Slow Way</h3><h4 id="1-导出当前的设置"><a href="#1-导出当前的设置" class="headerlink" title="1. 导出当前的设置"></a>1. 导出当前的设置</h4><p>运行以下命令，将当前设置保存到 <code>docker-config.json</code> 文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pinata get daemon &gt; docker-config.json</div><div class="line"><span class="comment">## &gt;&gt; &#123;"storage-driver":"aufs","debug":true&#125;</span></div></pre></td></tr></table></figure><h4 id="2-使用文本编辑器编辑设置"><a href="#2-使用文本编辑器编辑设置" class="headerlink" title="2. 使用文本编辑器编辑设置"></a>2. 使用文本编辑器编辑设置</h4><p>使用任何一种文本编辑器，打开 <code>docker-config.json</code> 并按照 <code>JSON</code> 格式编辑为以下内容，然后保存并退出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"storage-driver"</span>:<span class="string">"aufs"</span>,<span class="attr">"debug"</span>:<span class="literal">true</span>,<span class="attr">"registry-mirrors"</span>:[<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]&#125;</div></pre></td></tr></table></figure><h4 id="3-加载最新设置"><a href="#3-加载最新设置" class="headerlink" title="3. 加载最新设置"></a>3. 加载最新设置</h4><p>最后，加载 <code>docker-config.json</code> 中的设置就可以了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pinata set daemon @docker-config.json</div></pre></td></tr></table></figure><h2 id="获取-Docker-Guest-的-IP-地址"><a href="#获取-Docker-Guest-的-IP-地址" class="headerlink" title="获取 Docker Guest 的 IP 地址"></a>获取 Docker Guest 的 IP 地址</h2><p>有时候，我们需要得到 Docker Guest 的 IP 地址，其实不大有比较快捷的方法，比如，先运行 <code>pinata get network</code>，居然返回这个？？WTF？！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostnet</div></pre></td></tr></table></figure><p>然后只有运行 <code>pinata list</code> 了：</p><pre><code>These are advanced configuration settings to customise Docker.app on MacOSX.You can set them via pinata set &lt;key&gt; &lt;value&gt; &lt;options&gt;.🐳  hostname = docker   Hostname of the virtual machine endpoint, where container ports will be   exposed if using nat networking. Access it via &apos;docker.local&apos;.🐳  hypervisor = native (memory=2, ncpu=2)   The Docker.app includes embedded hypervisors that run the virtual machines   that power the containers. This setting allows you to control which the   default one used for Linux is. ▸  native: a version of the xhyve hypervisor that uses the MacOSX              Hypervisor.framework to run container VMs. Parameters:              memory (VM memory in gigabytes), ncpu (vCPUs)🐳  network = hostnet (docker-ipv4=192.168.65.2, host-ipv4=192.168.65.1)   Controls how local containers can access the external network via the   MacOS X host. This includes outbound traffic as well as publishing ports   for external access to the local containers. ▸ hostnet: a mode that helps if you are using a VPN that restricts              connectivity. Activating this mode will proxy container network              packets via the Docker.app process as host socket traffic.              Parameters: docker-ipv4 (docker node), host-ipv4 (host node) ▸     nat: a mode that uses the MacOS X vmnet.framework to route container              traffic to the host network via a NAT.🐳  filesystem = osxfs   Controls the mode by which files from the MacOS X host and the container   filesystem are shared with each other. ▸   osxfs: a FUSE-based filesystem that bidirectionally forwards OSX              filesystem events into the container.🐳  native/port-forwarding = true   Expose container ports on the Mac, rather than the VM ▸    true: Container ports will be exposed on the Mac ▸   false: Container ports will be exposed on the VM🐳  daemon = run &apos;pinata get daemon&apos; or &apos;pinata set daemon [@file|-]&gt;   JSON configuration of the local Docker daemon. Configure any custom   options you need as documented in:   https://docs.docker.com/engine/reference/commandline/daemon/. Set it   directly, or a @file or - for stdin.</code></pre><p>因此看起来使用 <code>pinata list | grep &#39;network =&#39;</code> 才是合理的方式之一：</p><pre><code>*  network = hostnet (docker-ipv4=192.168.65.2, host-ipv4=192.168.65.1)</code></pre><p>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DEPRECATION: 现在 Docker for Mac 已经可以通过界面配置 mirror 了，这片文章作废&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Docker" scheme="http://theo.im/tags/docker/"/>
    
      <category term="OSX" scheme="http://theo.im/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>在 Python 中统计文本字符个数</title>
    <link href="http://theo.im/blog/2014/08/13/count-text-element-count-in-python/"/>
    <id>http://theo.im/blog/2014/08/13/count-text-element-count-in-python/</id>
    <published>2014-08-13T06:05:02.000Z</published>
    <updated>2016-05-22T13:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符集向来都是一个大问题，即使是 Python 3.x，也最多只是能说感谢 <a href="http://en.wikipedia.org/wiki/Unicode" target="_blank" rel="external">Unicode</a> 字符集，字符串的存取现在没有问题了。</p><p>Unicode 字符集的常见<strong>编码</strong>有 <a href="http://en.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">UTF-8</a>、<a href="http://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="external">UTF-16</a>、<a href="http://en.wikipedia.org/wiki/UTF-32" target="_blank" rel="external">UTF-32</a> 等常见格式，另外，<a href="http://en.wikipedia.org/wiki/GB_18030" target="_blank" rel="external">GB18030</a> 也可以算其中一种（ GB18030，与 UTF-8 类似，是一种变长编码格式，最大的优势就是兼容 <a href="http://en.wikipedia.org/wiki/GBK" target="_blank" rel="external">GBK</a>/<a href="http://en.wikipedia.org/wiki/GB2312" target="_blank" rel="external">GB2312</a> ）</p><p>但是 Unicode 就能无痛的解决所有问题吗？答案是否定的。</p><a id="more"></a><h3 id="吐槽吐槽吐槽"><a href="#吐槽吐槽吐槽" class="headerlink" title="吐槽吐槽吐槽"></a>吐槽吐槽吐槽</h3><p>题外话，对于传统的 MBCS 编码，总得说来 GBK 设计算是比较合理的，至少在 0x00 ~ 0x7f 的 ASCII 区间里面没有乱来。BIG5 就不说了，“许功盖” 问题大家都知道，简直鬼火冒。这里就来吐槽一下 Shift-JIS 和 EUC-KR：</p><p><strong>Shift-JIS:</strong></p><table><thead><tr><th style="text-align:center">First byte</th><th style="text-align:center">ASCII</th><th style="text-align:center">Shift JIS</th></tr></thead><tbody><tr><td style="text-align:center">0x5c</td><td style="text-align:center"><code>\</code></td><td style="text-align:center"><code>¥</code></td></tr><tr><td style="text-align:center">0x7e</td><td style="text-align:center"><code>~</code></td><td style="text-align:center"><code>‾</code></td></tr></tbody></table><p><strong>EUC-KR:</strong></p><table><thead><tr><th style="text-align:center">First byte</th><th style="text-align:center">ASCII</th><th style="text-align:center">EUC-KR</th></tr></thead><tbody><tr><td style="text-align:center">0x5c</td><td style="text-align:center"><code>\</code></td><td style="text-align:center"><code>₩</code></td></tr></tbody></table><p>满眼都是钱钱钱，呵呵，打住。</p><h3 id="正文正文正文"><a href="#正文正文正文" class="headerlink" title="正文正文正文"></a>正文正文正文</h3><p>其它的先暂且不提，就说怎么统计字符个数吧（文本元素个数）。在 Python 中，往往想到的就是使用 <code>len()</code> 函数了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'中文'</span></div><div class="line">len(s) <span class="comment"># 呵呵...</span></div></pre></td></tr></table></figure><p>明智的人类知道有 Unicode，就可以把 Unicode 搬出来了，哪怕这个问题其实跟编码没有什么关系：</p><blockquote><p>用 Unicode 就好了，要不就使用 Python 3 字符串原生使用 Unicode，无痛解决所有问题</p></blockquote><p>Cooooooooooooool，让我们来试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">s1 = <span class="string">u'中文'</span></div><div class="line"><span class="keyword">assert</span> len(s1) == <span class="number">2</span>  <span class="comment"># Wow, 看起来对了是吧，让我们弹冠相庆吧</span></div><div class="line"></div><div class="line">s2 = <span class="string">u'𤴐𪚥'</span></div><div class="line">len(s2) <span class="comment"># 呵呵呵...</span></div></pre></td></tr></table></figure><p>天才的人类知道 UCS-2 和 UCS-4 的区别：</p><blockquote><p>谁叫你用 Windows 呢，只能用 UTF-16，弱爆了， Linux 下用 UCS-4 就能解决问题了</p></blockquote><p>Sure? 举一个反例就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">assert</span> sys.maxunicode == <span class="number">0x10ffff</span>  <span class="comment"># 保证是通过 UCS-4 编译的</span></div><div class="line"></div><div class="line"><span class="comment"># 这样，常见字，没有问题，GOOD</span></div><div class="line"><span class="keyword">assert</span> len(<span class="string">u'中文'</span>) == <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 这样，生僻字，Non BMP，也没有问题, GOOD</span></div><div class="line"><span class="keyword">assert</span> len(<span class="string">u'𤴐𪚥'</span>) == <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 欢迎来到 Unicode 的世界, 不要忘了 Unicode 有叫 Mark 的这种东西</span></div><div class="line"><span class="keyword">assert</span> len(<span class="string">u'ë́'</span>) == <span class="number">2</span></div></pre></td></tr></table></figure><p><img src="http://theo-im.qiniudn.com/images/yaoming-face.jpg" alt=""></p><p>所以最怕半罐水了（当然也包括我自己，太可怕了）。</p><h3 id="Show-Me-The-Source-Code"><a href="#Show-Me-The-Source-Code" class="headerlink" title="Show Me The Source Code"></a>Show Me The Source Code</h3><p>在 .Net Framwork 里，有一个叫 String.Globalization.StringInfo 的类可以处理上面的情况。由于我本人比较懒，就直接参考 Mono 的代码写了，Mono 的代码可以<a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Globalization/StringInfo.cs" target="_blank" rel="external">点击这里查看</a>。</p><p>为了避免系统的编码问题，推荐保存为文件(‘stringinfo.py’)，再使用 Python 解析器执行：</p><figure class="highlight python"><figcaption><span>stringinfo.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">__all__ = [<span class="string">'UnicodeCategory'</span>, <span class="string">'StringInfo'</span>]</div><div class="line"></div><div class="line">PY3K = sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> PY3K:</div><div class="line">    unicode_type = str</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    unicode_type = unicode</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnicodeCategory</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""General Category for Unicode</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    http://www.unicode.org/versions/Unicode6.0.0/ch04.pdf</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    <span class="comment"># Letter</span></div><div class="line">    UppercaseLetter = <span class="string">'Lu'</span></div><div class="line">    LowercaseLetter = <span class="string">'Ll'</span></div><div class="line">    TitlecaseLetter = <span class="string">'Lt'</span></div><div class="line">    ModifierLetter = <span class="string">'Lm'</span></div><div class="line">    OtherLetter = <span class="string">'Lo'</span></div><div class="line">    <span class="comment"># Mark</span></div><div class="line">    NonSpacingMark = <span class="string">'Mn'</span></div><div class="line">    SpacingCombiningMark = <span class="string">'Mc'</span></div><div class="line">    EnclosingMark = <span class="string">'Me'</span></div><div class="line">    <span class="comment"># Number</span></div><div class="line">    DecimalDigitNumber = <span class="string">'Nd'</span></div><div class="line">    LetterNumber = <span class="string">'Nl'</span></div><div class="line">    OtherNumber = <span class="string">'No'</span></div><div class="line">    <span class="comment"># Separator</span></div><div class="line">    SpaceSeparator = <span class="string">'Zs'</span></div><div class="line">    LineSeparator = <span class="string">'Zl'</span></div><div class="line">    ParagraphSeparator = <span class="string">'Zp'</span></div><div class="line">    <span class="comment"># Punctuation</span></div><div class="line">    ConnectorPunctuation = <span class="string">'Pc'</span></div><div class="line">    DashPunctuation = <span class="string">'Pd'</span></div><div class="line">    OpenPunctuation = <span class="string">'Ps'</span></div><div class="line">    ClosePunctuation = <span class="string">'Pe'</span></div><div class="line">    InitialQuotePunctuation = <span class="string">'Pi'</span></div><div class="line">    FinalQuotePunctuation = <span class="string">'Pf'</span></div><div class="line">    OtherPunctuation = <span class="string">'Po'</span></div><div class="line">    <span class="comment"># Symbol</span></div><div class="line">    MathSymbol = <span class="string">'Sm'</span></div><div class="line">    CurrencySymbol = <span class="string">'Sc'</span></div><div class="line">    ModifierSymbol = <span class="string">'Sk'</span></div><div class="line">    OtherSymbol = <span class="string">'So'</span></div><div class="line">    <span class="comment"># Other</span></div><div class="line">    Control = <span class="string">'Cc'</span></div><div class="line">    Format = <span class="string">'Cf'</span></div><div class="line">    Surrogate = <span class="string">'Cs'</span></div><div class="line">    PrivateUse = <span class="string">'Co'</span></div><div class="line">    OtherNotAssigned = <span class="string">'Cn'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringInfo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(s, unicode_type):</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"'string' parameter must be unicode"</span>)</div><div class="line">        self.s = s</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length_in_text_elements</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Gets the number of text elements."""</span></div><div class="line">        l = getattr(self, <span class="string">'_length_in_text_elements'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> l <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            l = sum(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> self.text_element_length_generator(self.s))</div><div class="line">            setattr(self, <span class="string">'_length_in_text_elements'</span>, l)</div><div class="line">        <span class="keyword">return</span> l</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text_element_length_generator</span><span class="params">(cls, s)</span>:</span></div><div class="line">        <span class="string">"""Gets the text element index generator of the specified string."""</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(s, unicode_type):</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"parameter 's' must be unicode"</span>)</div><div class="line"></div><div class="line">        marks = set([UnicodeCategory.NonSpacingMark,</div><div class="line">                     UnicodeCategory.SpacingCombiningMark,</div><div class="line">                     UnicodeCategory.EnclosingMark])</div><div class="line"></div><div class="line">        idx = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> idx &lt; len(s):</div><div class="line">            ch = s[idx]</div><div class="line">            count = <span class="number">1</span></div><div class="line">            cat = unicodedata.category(ch)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> cat == UnicodeCategory.Surrogate:</div><div class="line">                <span class="comment"># Check that it's a high surrogate followed by a low surrogate</span></div><div class="line">                <span class="keyword">if</span> <span class="number">0xd800</span> &lt;= ord(ch) &lt;= <span class="number">0xdbff</span>:</div><div class="line">                    <span class="keyword">if</span> (idx + <span class="number">1</span>) &lt; len(s) <span class="keyword">and</span> \</div><div class="line">                            <span class="number">0xdc00</span> &lt;= ord(s[idx + <span class="number">1</span>]) &lt;= <span class="number">0xdfff</span>:</div><div class="line">                        <span class="comment"># A valid surrogate pair</span></div><div class="line">                        count = <span class="number">2</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># Look for a base character, which may or may not be followed by a</span></div><div class="line">                <span class="comment"># series of combining characters</span></div><div class="line">                <span class="keyword">if</span> cat <span class="keyword">not</span> <span class="keyword">in</span> marks:</div><div class="line">                    <span class="keyword">while</span> idx + count &lt; len(s):</div><div class="line">                        cat = unicodedata.category(s[idx + count])</div><div class="line">                        <span class="keyword">if</span> cat <span class="keyword">not</span> <span class="keyword">in</span> marks:</div><div class="line">                            <span class="comment"># Finished the sequence</span></div><div class="line">                            <span class="keyword">break</span></div><div class="line">                        count += <span class="number">1</span></div><div class="line">            <span class="keyword">yield</span> count</div><div class="line">            idx += count</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text_element_generator</span><span class="params">(cls, s)</span>:</span></div><div class="line">        <span class="string">"""Gets the text element generator of the specified string."""</span></div><div class="line">        idx = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> cls.text_element_length_generator(s):</div><div class="line">            <span class="keyword">yield</span> s[idx:idx+length]</div><div class="line">            idx += length</div></pre></td></tr></table></figure><p>然后简单测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"></div><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">from</span> stringinfo <span class="keyword">import</span> StringInfo</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> sys.maxunicode &gt; <span class="number">0xffff</span>:</div><div class="line">        print(<span class="string">"Unicode encoding is UTF-32"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"Unicode encoding is UTF-16"</span>)</div><div class="line"></div><div class="line">    s = <span class="string">u"ë́中文𤴐𪚥"</span></div><div class="line">    print(len(s))  <span class="comment"># 根据 Python 是否启用 UCS-4，结果不同，UTF-16 下是 8，UCS-4 下是 6</span></div><div class="line">    print(StringInfo(s).length_in_text_elements)  <span class="comment"># 5个字符</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">        print(<span class="string">'U+&#123;:04X&#125;:&#123;&#125;'</span>.format(ord(c), unicodedata.category(c)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>╮(╯_╰)╭ 终于舒服了。</p><p>~FIN~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符集向来都是一个大问题，即使是 Python 3.x，也最多只是能说感谢 &lt;a href=&quot;http://en.wikipedia.org/wiki/Unicode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt; 字符集，字符串的存取现在没有问题了。&lt;/p&gt;
&lt;p&gt;Unicode 字符集的常见&lt;strong&gt;编码&lt;/strong&gt;有 &lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UTF-8&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-16&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UTF-16&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UTF-32&lt;/a&gt; 等常见格式，另外，&lt;a href=&quot;http://en.wikipedia.org/wiki/GB_18030&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GB18030&lt;/a&gt; 也可以算其中一种（ GB18030，与 UTF-8 类似，是一种变长编码格式，最大的优势就是兼容 &lt;a href=&quot;http://en.wikipedia.org/wiki/GBK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GBK&lt;/a&gt;/&lt;a href=&quot;http://en.wikipedia.org/wiki/GB2312&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GB2312&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;但是 Unicode 就能无痛的解决所有问题吗？答案是否定的。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Python" scheme="http://theo.im/tags/python/"/>
    
      <category term="Unicode" scheme="http://theo.im/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>Golang 内存模型（一）</title>
    <link href="http://theo.im/blog/2014/08/08/Golang-memory-part-1/"/>
    <id>http://theo.im/blog/2014/08/08/Golang-memory-part-1/</id>
    <published>2014-08-08T00:39:44.000Z</published>
    <updated>2016-05-22T13:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>首先，这是一篇菜B写的文章，可能会有理解错误的地方，发现错误请斧正，谢谢。</p><p>为了治疗我的懒癌早期，我一次就不写得太多了，这个系列想写很久了，每次都是开了个头就没有再写。这次争取把写完，弄成一个系列。</p><h2 id="此-nil-不等彼-nil"><a href="#此-nil-不等彼-nil" class="headerlink" title="此 nil 不等彼 nil"></a>此 nil 不等彼 nil</h2><p><em>先声明，这个标题有标题党的嫌疑。</em></p><p>Go 的类型系统是比较奇葩的，<code>nil</code> 的含义跟其它语言有些差别，这里举个例子（可以直接进入 <a href="http://play.golang.org/p/ezFhXX0dnB" target="_blank" rel="external">http://play.golang.org/p/ezFhXX0dnB</a> 运行查看结果）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> a *A = <span class="literal">nil</span></div><div class="line">    <span class="keyword">var</span> ai <span class="keyword">interface</span>&#123;&#125; = a</div><div class="line">    <span class="keyword">var</span> ei <span class="keyword">interface</span>&#123;&#125; = <span class="literal">nil</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"ai == nil: %v\n"</span>, ai == <span class="literal">nil</span>)</div><div class="line">    fmt.Printf(<span class="string">"ai == ei: %v\n"</span>, ai == ei)</div><div class="line">    fmt.Printf(<span class="string">"ei == a: %v\n"</span>, a == ei)</div><div class="line">    fmt.Printf(<span class="string">"ei == nil: %v\n"</span>, ei == <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// -&gt; 输出</span></div><div class="line"><span class="comment">// ai == nil: false</span></div><div class="line"><span class="comment">// ai == ei: false</span></div><div class="line"><span class="comment">// ei == a: false</span></div><div class="line"><span class="comment">// ei == nil: true</span></div></pre></td></tr></table></figure><p>这里 <code>ai != nil</code>，对于没有用过 Go 的人来说比较费解，对我来说，这个算得上一门语言设计有歧义的地方（Golang FAQ 有对于此问题的描述，可以参考一下：<a href="http://golang.org/doc/faq#nil_error" target="_blank" rel="external">http://golang.org/doc/faq#nil_error</a>）。</p><p>简单的说就是 nil 代表 “zero value”（空值），<strong>对于不同类型，它具体所代表的值不同</strong>。比如上面的 <code>a</code> 为“<code>*A</code> 类型的空值”，而 <code>ai</code> 为“<code>interface{}</code> 类型的空值”。造成理解失误的最大问题在于，<code>struct pointer</code> 到 <code>interface</code> 有隐式转换（<code>var ai interface{] = a</code>，这里有个隐式转换），至于为什么对于 Go 这种在其它转换方面要求严格，而对于 <code>interface</code> 要除外呢，for convenience 吧，呵呵……</p><p>碰到了这个坑，我就开始好奇了，Go 的类型系统到底是什么样的？</p><a id="more"></a><h2 id="Go-内存模型-interface"><a href="#Go-内存模型-interface" class="headerlink" title="Go 内存模型 - interface"></a>Go 内存模型 - interface</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>为了读懂下面的内容，你需要：</p><ul><li>了解 C、Go 语言</li><li>Go 1.3 源代码 (<a href="https://go.googlecode.com/archive/go1.3.zip" target="_blank" rel="external">https://go.googlecode.com/archive/go1.3.zip</a>)</li></ul><p><strong>PS:</strong> 由于 Go 用到了 <code>Plan9 C</code> 这个小众的C编译器的扩展，比如在函数签名中使用 <code>·</code> 字符以区分 package/function（比如<code>runtime·panic</code>），这对理解不会产生什么影响。</p><p><strong>PSS:</strong> 对于 Go runtime，可以参考<code>src/pkg/reflect</code>（<code>reflect</code>包）中的的代码，对类型系统的实现的理解有帮助。</p><p>Go 语言的类型定义可以在 <code>src/pkg/runtime/</code> 目录下找到，主要由以下几个文件构成：</p><ul><li><code>runtime.h</code></li><li><code>type.h</code></li></ul><p>对于 <code>interface</code> 类型，主要看下面几个结构体定义：</p><ul><li><code>InterfaceType</code></li><li><code>Itab</code></li><li><code>Iface</code></li><li><code>Eface</code></li></ul><p>它们的C语言定义如下 (可以在 <code>runtime.h</code> 中找到)：</p><p><strong>InterfaceType:</strong></p><p>代表了总的 interface 类型，其中：</p><ul><li>Type: 类型描述，所有的类型都有这个类型描述（比如 array, map, slice）</li><li>mhdr 以及 m: interface 接口方法列表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> InterfaceType</div><div class="line">&#123;</div><div class="line">    Type;</div><div class="line">    Slice mhdr;</div><div class="line">    IMethod m[];</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>Itab:</strong></p><p>类似于虚函数表，该表不会被GC回收，其中：</p><ul><li>inter: 指向具体的 interface 类型</li><li>type: 具体实现类型, 也即 receiver type</li><li>link: 指向下一个函数表，因为 interface 可以 embed 多个 interface，因此实现为一个链表形式</li><li>bad: &lt;略&gt;</li><li>unsued: &lt;略&gt;</li><li>fun: 函数列表，每个元素是一个指向具体函数实现的指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span>  Itab</div><div class="line">&#123;</div><div class="line">    InterfaceType*  inter;</div><div class="line">    Type*   type;</div><div class="line">    Itab*   link;</div><div class="line">    int32   bad;</div><div class="line">    int32   unused;</div><div class="line">    <span class="keyword">void</span>    (*fun[])(<span class="keyword">void</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>Iface:</strong></p><p>该类型为一般的 <code>interface</code> 类型所对应的数据结构，其中：</p><ul><li>tab: 参见 <code>Itab</code> 的说明，尤其是 <code>Itab::link</code></li><li>data: 指向具体数据（比如指向struct，当然，如果一个数据不超过一个字长，那么这个data就可以直接存放，不需要指针再做以及跳转）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Iface</div><div class="line">&#123;</div><div class="line">    Itab*   tab;</div><div class="line">    <span class="keyword">void</span>*   data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>Eface:</strong></p><p>该类型为 <code>interface{}</code> (empty interface) 所对应的数据结构，其中：</p><ul><li>type: 具体实现类型, 也即 receiver type</li><li>data: 同 <code>Iface</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Eface</div><div class="line">&#123;</div><div class="line">    Type*   type;</div><div class="line">    <span class="keyword">void</span>*   data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>他们的依赖关系如下图所示：</p><p><img src="http://theo-im.qiniudn.com/images/graph/20140808-interface-deps.png" alt=""></p><p>先到这里，下一篇将会举例子说明给一个 <code>interface{}</code> 类型的变量赋值后，其具体的内存结构是怎么样的。</p><p>打了几个小时，真费时间，争取这个系列不坑 (逃</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;首先，这是一篇菜B写的文章，可能会有理解错误的地方，发现错误请斧正，谢谢。&lt;/p&gt;
&lt;p&gt;为了治疗我的懒癌早期，我一次就不写得太多了，这个系列想写很久了，每次都是开了个头就没有再写。这次争取把写完，弄成一个系列。&lt;/p&gt;
&lt;h2 id=&quot;此-nil-不等彼-nil&quot;&gt;&lt;a href=&quot;#此-nil-不等彼-nil&quot; class=&quot;headerlink&quot; title=&quot;此 nil 不等彼 nil&quot;&gt;&lt;/a&gt;此 nil 不等彼 nil&lt;/h2&gt;&lt;p&gt;&lt;em&gt;先声明，这个标题有标题党的嫌疑。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Go 的类型系统是比较奇葩的，&lt;code&gt;nil&lt;/code&gt; 的含义跟其它语言有些差别，这里举个例子（可以直接进入 &lt;a href=&quot;http://play.golang.org/p/ezFhXX0dnB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://play.golang.org/p/ezFhXX0dnB&lt;/a&gt; 运行查看结果）：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; A &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a *A = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ai &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; = a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ei &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;ai == nil: %v\n&quot;&lt;/span&gt;, ai == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;ai == ei: %v\n&quot;&lt;/span&gt;, ai == ei)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;ei == a: %v\n&quot;&lt;/span&gt;, a == ei)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;ei == nil: %v\n&quot;&lt;/span&gt;, ei == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -&amp;gt; 输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ai == nil: false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ai == ei: false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ei == a: false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ei == nil: true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 &lt;code&gt;ai != nil&lt;/code&gt;，对于没有用过 Go 的人来说比较费解，对我来说，这个算得上一门语言设计有歧义的地方（Golang FAQ 有对于此问题的描述，可以参考一下：&lt;a href=&quot;http://golang.org/doc/faq#nil_error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://golang.org/doc/faq#nil_error&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;简单的说就是 nil 代表 “zero value”（空值），&lt;strong&gt;对于不同类型，它具体所代表的值不同&lt;/strong&gt;。比如上面的 &lt;code&gt;a&lt;/code&gt; 为“&lt;code&gt;*A&lt;/code&gt; 类型的空值”，而 &lt;code&gt;ai&lt;/code&gt; 为“&lt;code&gt;interface{}&lt;/code&gt; 类型的空值”。造成理解失误的最大问题在于，&lt;code&gt;struct pointer&lt;/code&gt; 到 &lt;code&gt;interface&lt;/code&gt; 有隐式转换（&lt;code&gt;var ai interface{] = a&lt;/code&gt;，这里有个隐式转换），至于为什么对于 Go 这种在其它转换方面要求严格，而对于 &lt;code&gt;interface&lt;/code&gt; 要除外呢，for convenience 吧，呵呵……&lt;/p&gt;
&lt;p&gt;碰到了这个坑，我就开始好奇了，Go 的类型系统到底是什么样的？&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Go" scheme="http://theo.im/tags/go/"/>
    
      <category term="Golang" scheme="http://theo.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>删除 Intel HD Graphics 显卡工具的全局快捷键</title>
    <link href="http://theo.im/blog/2014/08/07/Remove-Intel-HD-Graphics-Hotkeys/"/>
    <id>http://theo.im/blog/2014/08/07/Remove-Intel-HD-Graphics-Hotkeys/</id>
    <published>2014-08-07T02:44:43.000Z</published>
    <updated>2016-05-22T13:48:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Intel的内置显卡工具总是注册全局的快捷键，而且还是常用的（比如 <code>Sublime Text</code>, <code>PyCharm</code>等工具的默认按键绑定），如下：</p><ul><li>Ctrl + Shift + Up</li><li>Ctrl + Shift + Down</li><li>Ctrl + Shift + Left</li><li>Ctrl + Shift + Right</li></ul><p>这些快捷键都是由 <code>igfxHK.exe</code> 注册的，虽然可以在任务栏中点击禁用快捷键，但是由于快捷键是全局注册，其它应用程序仍然不能使用这些快捷键。</p><p>虽然使用 <code>taskkill /IM igfxHK.exe</code> 来强行终止其进程，释放全局快捷键也可以，但是每次重启都要重新做一次，无论是否自动化，都感觉太二逼了，经过一番瞎捣，发现可以通过该注册表，把快捷键定义全部删除掉，避免 <code>igfxHK.exe</code>占有这些全局快捷键。</p><p>注册表文件如下，保存为一个 <code>.reg</code> 文件最后双击运行并导入到注册表即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[HKEY_CURRENT_USER\Software\Intel\Display\igfxcui\HotKeys]</div><div class="line">&quot;3101&quot;=-</div><div class="line">&quot;3105&quot;=-</div><div class="line">&quot;3121&quot;=-</div><div class="line">&quot;9530&quot;=-</div><div class="line">&quot;3106&quot;=-</div><div class="line">&quot;3107&quot;=-</div><div class="line">&quot;3108&quot;=-</div><div class="line">&quot;3109&quot;=-</div><div class="line">&quot;3110&quot;=-</div><div class="line">&quot;4528&quot;=-</div><div class="line">&quot;10&quot;=-</div><div class="line">&quot;11&quot;=-</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Intel的内置显卡工具总是注册全局的快捷键，而且还是常用的（比如 &lt;code&gt;Sublime Text&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;等工具的默认按键绑定），如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + Shift + Up&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Miscellaneous" scheme="http://theo.im/blog/categories/miscellaneous/"/>
    
    
  </entry>
  
  <entry>
    <title>VirtualBox与杀毒软件冲突导致虚拟机无法启动: 错误 &quot;supR3HardenedWinReSpawn&quot;</title>
    <link href="http://theo.im/blog/2014/08/05/VirtualBox-error-launching-vm-instance-in-supR3HardenedWinReSpawn/"/>
    <id>http://theo.im/blog/2014/08/05/VirtualBox-error-launching-vm-instance-in-supR3HardenedWinReSpawn/</id>
    <published>2014-08-05T05:29:44.000Z</published>
    <updated>2016-05-22T13:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在公司机器上装了 VirtualBox (版本 4.3.14) 和 Vagrant, 在运行 <code>vagrant up</code> 后总是提示虚拟机不能启动的错误。打开 VirtualBox 然后手动启动虚拟机发现如下错误框：</p><p><img src="http://theo-im.qiniudn.com/images/virtualbox-error.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---------------------------</div><div class="line">VirtualBox - Error In supR3HardenedWinReSpawn</div><div class="line">---------------------------</div><div class="line">Error relaunching VirtualBox VM process: 5</div><div class="line">Command line: &apos;81954AF5-4D2F-31EB-A142-B7AF187A1C41-suplib-2ndchild --comment Work_default_1407215688716_8404 --startvm 93cdc421-ae20-49d6-8ca4-6c5570f809cd --no-startvm-errormsgbox&apos; (rc=-104)/&gt;</div><div class="line">---------------------------</div></pre></td></tr></table></figure><p>原因:</p><ul><li>与 Symantec Endpoint Protection 冲突</li></ul><p>临时解决办法：</p><ul><li>使用 4.3.12 版本的 VirtualBox，<a href="https://www.virtualbox.org/wiki/Download_Old_Builds_4_3" target="_blank" rel="external">点击这里下载</a>.</li></ul><p><strong>NOTE</strong> 降级 VirtualBox 后需要重新启动计算机</p><p>另外可以<a href="https://forums.virtualbox.org/viewtopic.php?f=6&amp;t=62615" target="_blank" rel="external">参考VirtualBox 论坛的讨论</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在公司机器上装了 VirtualBox (版本 4.3.14) 和 Vagrant, 在运行 &lt;code&gt;vagrant up&lt;/code&gt; 后总是提示虚拟机不能启动的错误。打开 VirtualBox 然后手动启动虚拟机发现如下错误框：&lt;/p&gt;
&lt;p&gt;&lt;img src=
      
    
    </summary>
    
      <category term="Miscellaneous" scheme="http://theo.im/blog/categories/miscellaneous/"/>
    
    
      <category term="Vagrant" scheme="http://theo.im/tags/vagrant/"/>
    
      <category term="VirtualBox" scheme="http://theo.im/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>在 Go 中获取 stacktrace</title>
    <link href="http://theo.im/blog/2014/07/21/Printing-stacktrace-in-Go/"/>
    <id>http://theo.im/blog/2014/07/21/Printing-stacktrace-in-Go/</id>
    <published>2014-07-21T13:30:12.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><figcaption><span>打印 stacktrace</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1</span>&lt;&lt;<span class="number">16</span>)</div><div class="line"><span class="comment">// 获取 **所有** goroutine 的 stacktrace</span></div><div class="line">runtime.Stack(buf, <span class="literal">true</span>)</div><div class="line"><span class="comment">// 如果需要获取 **当前** goroutine 的 stacktrace, 第二个参数需要为 `false`</span></div><div class="line">runtime.Stack(buf, <span class="literal">true</span>)</div><div class="line">fmt.Println(<span class="keyword">string</span>(buf))</div></pre></td></tr></table></figure><p>太诡异了，居然要指定 buffer 的大小，用起来不方便。虽然可以给个“足够大” buffer 用来容纳stacktrace，但是什么是“足够大”？</p><p>为了确认 <code>runtime.Stack()</code> 函数的 behavior，需要参考一下 Go 输出 stacktrace 的实现代码。该代码是使用 <a href="https://code.google.com/p/go/source/browse/src/cmd/dist/goc2c.c" target="_blank" rel="external">GOC</a> 写成的。</p><blockquote><p>A .goc file is a combination of a limited form of Go with C.</p></blockquote><figure class="highlight go"><figcaption><span>mprof.goc</span><a href="https://code.google.com/p/go/source/browse/src/pkg/runtime/mprof.goc?name" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stack</span><span class="params">(b Slice, all <span class="keyword">bool</span>)</span> <span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">uintptr</span> pc, sp;</div><div class="line"></div><div class="line">    <span class="comment">// Stack pointer</span></div><div class="line">    sp = runtime·getcallersp(&amp;b);</div><div class="line">    <span class="comment">// Programer pointer</span></div><div class="line">    pc = (<span class="keyword">uintptr</span>)runtime·getcallerpc(&amp;b);</div><div class="line"></div><div class="line">    <span class="comment">// 如果选择输出所有 goroutine 的 traceback, 挂起所有goroutine,</span></div><div class="line">    <span class="comment">// 在本函数完成后恢复</span></div><div class="line">    <span class="keyword">if</span>(all) &#123;</div><div class="line">        runtime·semacquire(&amp;runtime·worldsema, <span class="literal">false</span>);</div><div class="line">        m-&gt;gcing = <span class="number">1</span>;</div><div class="line">        runtime·stoptheworld();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(b.<span class="built_in">len</span> == <span class="number">0</span>)</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">// 重定向输出缓冲, 打印到 `b` 这个buffer里</span></div><div class="line">        g-&gt;writebuf = (<span class="keyword">byte</span>*)b.array;</div><div class="line">        <span class="comment">// buffer具有固定大小, 因此会截断</span></div><div class="line">        g-&gt;writenbuf = b.<span class="built_in">len</span>;</div><div class="line">        <span class="comment">// proc.c: runtime·goroutineheader</span></div><div class="line">        runtime·goroutineheader(g);</div><div class="line">        <span class="comment">// traceback_$&#123;arch&#125;.c</span></div><div class="line">        runtime·traceback(pc, sp, <span class="number">0</span>, g);</div><div class="line">        <span class="keyword">if</span>(all)</div><div class="line">            runtime·tracebackothers(g);</div><div class="line">        n = b.<span class="built_in">len</span> - g-&gt;writenbuf;</div><div class="line">        g-&gt;writebuf = <span class="literal">nil</span>;</div><div class="line">        g-&gt;writenbuf = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(all) &#123;</div><div class="line">        m-&gt;gcing = <span class="number">0</span>;</div><div class="line">        runtime·semrelease(&amp;runtime·worldsema);</div><div class="line">        runtime·starttheworld();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为打印到buffer会截断过长的结果，因此可以写一个包装函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">StackTrace</span><span class="params">(all <span class="keyword">bool</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">    <span class="comment">// Reserve 10K buffer at first</span></div><div class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10240</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        size := runtime.Stack(buf, all)</div><div class="line">        <span class="comment">// The size of the buffer may be not enough to hold the stacktrace,</span></div><div class="line">        <span class="comment">// so double the buffer size</span></div><div class="line">        <span class="keyword">if</span> size == <span class="built_in">len</span>(buf) &#123;</div><div class="line">            buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(buf)&lt;&lt;<span class="number">1</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(buf)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例子可以在这里看到：<a href="http://play.golang.org/p/4ABrCVbH9g" target="_blank" rel="external">Go Playground</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight go&quot;&gt;&lt;figcaption&gt;&lt;span&gt;打印 stacktrace&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Go" scheme="http://theo.im/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云镜像服务器</title>
    <link href="http://theo.im/blog/2014/05/20/use-aliyun-mirror-to-boost-up-download-speed/"/>
    <id>http://theo.im/blog/2014/05/20/use-aliyun-mirror-to-boost-up-download-speed/</id>
    <published>2014-05-20T03:40:29.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近本机访问 <code>163.com</code> 的 <code>CentOS</code> 镜像比较不稳定，体现在 ping 很低，但是 HTTP连接很慢，<code>yum</code> 的 <code>fastestmirror</code> 也不太理想，所以一般都禁用之。</p><p>发现阿里云的镜像服务器，立马换了，便秘立刻就通了。</p><h2 id="yum-镜像"><a href="#yum-镜像" class="headerlink" title="yum 镜像"></a>yum 镜像</h2><h3 id="官方源镜像"><a href="#官方源镜像" class="headerlink" title="官方源镜像"></a>官方源镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 禁用 fastestmirror 插件</span></div><div class="line">sed -i.backup <span class="string">'s/^enabled=1/enabled=0/'</span> /etc/yum/pluginconf.d/fastestmirror.conf</div><div class="line"><span class="comment"># 备份</span></div><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class="line"><span class="comment"># 使用阿里云镜像</span></div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base-aliyun.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div></pre></td></tr></table></figure><h3 id="EPEL-镜像"><a href="#EPEL-镜像" class="headerlink" title="EPEL 镜像"></a>EPEL 镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 EPEL 源</span></div><div class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div><div class="line">wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</div><div class="line">rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm</div><div class="line"><span class="comment"># 使用阿里云镜像</span></div><div class="line"><span class="keyword">if</span> [[ ! <span class="_">-f</span> /etc/yum.repos.d/epel.repo.backup ]]; <span class="keyword">then</span></div><div class="line">    mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup 2&gt;/dev/null || :</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ ! <span class="_">-f</span> /etc/yum.repos.d/epel-testing.repo.backup ]]; <span class="keyword">then</span></div><div class="line">    mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup 2&gt;/dev/null || :</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</div></pre></td></tr></table></figure><h2 id="PyPi-镜像"><a href="#PyPi-镜像" class="headerlink" title="PyPi 镜像"></a>PyPi 镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/.pip</div><div class="line">touch ~/.pip/pip.conf</div><div class="line"></div><div class="line">sed -i.backup -r \</div><div class="line">    <span class="string">'s/^index-url\s*=\s*.+$/index-url = http:\/\/mirrors.aliyun.com\/pypi\/simple\//'</span> \</div><div class="line">    ~/.pip/pip.conf</div><div class="line"></div><div class="line"><span class="comment"># If file not changed, write contents back to pip.conf</span></div><div class="line">diff <span class="string">"~/.pip/pip.conf"</span> <span class="string">"~/.pip/pip.conf.backup"</span> &amp;&gt; /dev/null</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">cat &gt; ~/.pip/pip.conf &lt;&lt;EOF</div><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line">EOF</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h2 id="RubyGems-镜像"><a href="#RubyGems-镜像" class="headerlink" title="RubyGems 镜像"></a>RubyGems 镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="built_in">source</span> -r https://rubygems.org/</div><div class="line">gem <span class="built_in">source</span> <span class="_">-a</span> http://mirrors.aliyun.com/rubygems/</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近本机访问 &lt;code&gt;163.com&lt;/code&gt; 的 &lt;code&gt;CentOS&lt;/code&gt; 镜像比较不稳定，体现在 ping 很低，但是 HTTP
连接很慢，&lt;code&gt;yum&lt;/code&gt; 的 &lt;code&gt;fastestmirror&lt;/code&gt; 也不太理想，所以
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 FPM 创建 Python 的 RPM 包</title>
    <link href="http://theo.im/blog/2014/05/16/use-fpm-to-create-python-rpm-packages/"/>
    <id>http://theo.im/blog/2014/05/16/use-fpm-to-create-python-rpm-packages/</id>
    <published>2014-05-16T01:03:33.000Z</published>
    <updated>2016-05-22T13:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>生成 RPM 包太麻烦了，最近知道了一个名为 <a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 的神器，在此记录一下。</p><h2 id="安装-FPM"><a href="#安装-FPM" class="headerlink" title="安装 FPM"></a>安装 FPM</h2><p><strong>NOTE:</strong> 测试系统为 RedHat 系的 CentOS 6.3，编译 Python 2.7.6 的 RPM 包。</p><h3 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h3><p>由于 <a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 使用 <code>Ruby</code> 写成，因此系统中需要安装 <code>Ruby</code> 的运行环境（这里 <code>gem</code> 的源改为了 taobao 的镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install ruby dependencies</span></div><div class="line">yum -y install ruby rubygems ruby-devel</div><div class="line"><span class="comment"># Use taobao repo for ruby gems</span></div><div class="line">gem sources <span class="_">-a</span> http://ruby.taobao.org/</div><div class="line"><span class="comment"># Remove origin repo from ruby gems</span></div><div class="line">gem sources --remove http://rubygems.org/</div></pre></td></tr></table></figure><h3 id="通过-Gem-安装-FPM"><a href="#通过-Gem-安装-FPM" class="headerlink" title="通过 Gem 安装 FPM"></a>通过 Gem 安装 FPM</h3><p>在 <code>Ruby</code> 安装完成后，就可以使用 <code>gem</code> 安装 <a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install fpm</span></div><div class="line">gem install fpm</div></pre></td></tr></table></figure><p>Good.</p><h2 id="设置编译环境"><a href="#设置编译环境" class="headerlink" title="设置编译环境"></a>设置编译环境</h2><p>在编译 Python 之前，需要安装开发工具和库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install EPEL repository</span></div><div class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div><div class="line">wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</div><div class="line">rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm</div><div class="line"></div><div class="line"><span class="comment"># Install build toolchain</span></div><div class="line">yum -y groupinstall <span class="string">"Development tools"</span></div><div class="line">yum -y install openssl-devel readline-devel bzip2-devel sqlite-devel zlib-devel ncurses-devel db4-devel expat-devel</div></pre></td></tr></table></figure><h2 id="编译并创建-Python-的-RPM-包"><a href="#编译并创建-Python-的-RPM-包" class="headerlink" title="编译并创建 Python 的 RPM 包"></a>编译并创建 Python 的 RPM 包</h2><p><a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 的使用比较简单，可以参考 <a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 的 <a href="https://github.com/jordansissel/fpm/wiki" target="_blank" rel="external">使用说明</a>。</p><p>首先，下载 Python-2.7.6 的源码包并解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --progress-bar -LO http://mirrors.sohu.com/python/2.7.6/Python-2.7.6.tgz</div><div class="line">tar xf Python-2.7.6.tgz</div></pre></td></tr></table></figure><p>第二步，编译 Python-2.7.6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Python-2.7.6.tgz</div><div class="line"></div><div class="line"><span class="comment"># Python2.7编译安装后会安装到这个目录，方便打包</span></div><div class="line"><span class="built_in">export</span> INTERMEDIATE_INSTALL_DIR=/tmp/installdir-Python-2.7.6</div><div class="line"><span class="comment"># RPM包安装后Python2.7的目录</span></div><div class="line"><span class="built_in">export</span> INSTALL_DIR=/usr/<span class="built_in">local</span></div><div class="line"></div><div class="line">LDFLAGS=<span class="string">"-Wl,-rpath=<span class="variable">$&#123;INSTALL_DIR&#125;</span>/lib <span class="variable">$&#123;LDFLAGS&#125;</span>"</span> \</div><div class="line">            ./configure --prefix=<span class="variable">$&#123;INSTALL_DIR&#125;</span> --enable-unicode=ucs4 \</div><div class="line">                --enable-shared --enable-ipv6</div><div class="line">make</div><div class="line">make install DESTDIR=<span class="variable">$&#123;INTERMEDIATE_INSTALL_DIR&#125;</span></div></pre></td></tr></table></figure><p>第三步，使用 <a href="https://github.com/jordansissel/fpm" target="_blank" rel="external">FPM</a> 创建 RPM 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注意之前导出 INTERMEDIATE_INSTALL_DIR 和 INSTALL_DIR 这两个环境变量，这里还要使用</span></div><div class="line">fpm <span class="_">-s</span> dir -t <span class="_">-f</span> rpm -n python27 -v <span class="string">'2.7.6'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'openssl'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'bzip2'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'zlib'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'expat'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'db4'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'sqlite'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'ncurses'</span> \</div><div class="line">    <span class="_">-d</span> <span class="string">'readline'</span> \</div><div class="line">    --directories=<span class="variable">$&#123;INSTALL_DIR&#125;</span>/lib/python2.7/ \</div><div class="line">    --directories=<span class="variable">$&#123;INSTALL_DIR&#125;</span>/include/python2.7/ \</div><div class="line">    -C <span class="variable">$&#123;INTERMEDIATE_INSTALL_DIR&#125;</span> .</div></pre></td></tr></table></figure><h2 id="Bonus-Time"><a href="#Bonus-Time" class="headerlink" title="Bonus Time"></a>Bonus Time</h2><p>包含以下内容：</p><ul><li>自动下载、编译、打包 Python RPM 包的 Makefile；</li><li>自动下载、编译、打包 virtualenv、pip、supervisor 等 Python 库和工具的 RPM 包。</li></ul><p>GitHub 项目地址：<a href="https://github.com/timonwong/python27-rpm" target="_blank" rel="external">python27-rpm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生成 RPM 包太麻烦了，最近知道了一个名为 &lt;a href=&quot;https://github.com/jordansissel/fpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPM&lt;/a&gt; 的神器，在此记录一下。&lt;/p&gt;
&lt;h2 id=&quot;安装-FP
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Python" scheme="http://theo.im/tags/python/"/>
    
      <category term="FPM" scheme="http://theo.im/tags/fpm/"/>
    
      <category term="RPM" scheme="http://theo.im/tags/rpm/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ笔记（三）: Pika客户端（Python）发送大尺寸消息的问题</title>
    <link href="http://theo.im/blog/2014/05/15/rabbitmq-note-3-pika-send-large-message/"/>
    <id>http://theo.im/blog/2014/05/15/rabbitmq-note-3-pika-send-large-message/</id>
    <published>2014-05-15T02:27:25.000Z</published>
    <updated>2016-05-22T13:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这个问题存在很久了，现象就是使用 <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a> 库的客户端在发送大尺寸消息后，RabbitMQ没有收到，Consumer 那里会认为消息已丢失。</p><p><strong>NOTE:</strong> 即使在本文写时的最新版(v0.9.13)依然存在这个问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>因为网络状态很好，所以没有考虑网络的错误，直接考虑<a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a>库的问题。</p><p>那么第一步就是把 <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a> 的代码拿来读一遍，主要看它是怎么发送消息的，经过一番探索，找到了<code>pika/adapters/base_connection.py</code> 这个文件，来看看里面的内容：</p><figure class="highlight python"><figcaption><span>pika/adapters/base_connection.py</span><a href="https://github.com/pika/pika/blob/0.9.13/pika/adapters/base_connection.py#L329" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_write</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""Handle any outbound buffer writes that need to take place."""</span></div><div class="line">    total_written = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> self.outbound_buffer:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            bytes_written = self.socket.send(self.outbound_buffer.popleft())</div><div class="line">        <span class="keyword">except</span> socket.timeout:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">except</span> socket.error, error:</div><div class="line">            <span class="keyword">return</span> self._handle_error(error)</div><div class="line">        total_written += bytes_written</div><div class="line">    <span class="keyword">return</span> total_written</div></pre></td></tr></table></figure><p>看出问题了吗？</p><p>来看看<code>socket.send</code>的文档吧：</p><blockquote><p>Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this concept, consult the Socket Programming HOWTO.</p><footer><strong>Python Docs</strong><cite><a href="https://docs.python.org/2/library/socket.html#socket.socket.send" target="_blank" rel="external">socket.send</a></cite></footer></blockquote><p>问题就是，没有检查 <code>socket.send</code> 的返回值，由于 <code>socket.send</code> 返回实际发送的直接个数，可能会小于期望（在这里是<code>self.outbound_buffer.popleft()</code>）。</p><p>由于 <code>socket.send</code> 可能没有将数据发送完成就返回了，造成了消息丢失的情况。</p><p>本来想自己修的，看了一眼 <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a> 的 <code>master</code> 分支，已经修正了（一次保证将一个帧(Frame)发送完成）：</p><figure class="highlight python"><figcaption><span>pika/adapters/base_connection.py</span><a href="https://github.com/pika/pika/blob/master/pika/adapters/base_connection.py#L354" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_write</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""Handle any outbound buffer writes that need to take place."""</span></div><div class="line">    bytes_written = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> self.outbound_buffer:</div><div class="line">        frame = self.outbound_buffer.popleft()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.socket.sendall(frame)</div><div class="line">            bytes_written = len(frame)</div><div class="line">        <span class="keyword">except</span> socket.timeout:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> error:</div><div class="line">            <span class="keyword">return</span> self._handle_error(error)</div><div class="line">    <span class="keyword">return</span> bytes_written</div></pre></td></tr></table></figure><p>呵呵……</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>自行打补丁；</li><li>使用 <code>git</code> 上的 Pika: <code>pip install git+https://github.com/pika/pika.git</code>；</li><li>不用 <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a>, 换其它的，比如 <a href="http://kombu.readthedocs.org/" target="_blank" rel="external">Kombu</a>。</li></ol><p>我现在不用 <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a> 了，用 <a href="http://kombu.readthedocs.org/" target="_blank" rel="external">Kombu</a>。</p><p><strong>PS:</strong> <a href="https://pypi.python.org/pypi/pika/" target="_blank" rel="external">Pika</a> 的发布也太不积极了，都怎么久了还不发新版本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;这个问题存在很久了，现象就是使用 &lt;a href=&quot;https://pypi.python.org/pypi/pika/&quot; 
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Python" scheme="http://theo.im/tags/python/"/>
    
      <category term="RabbitMQ" scheme="http://theo.im/tags/rabbitmq/"/>
    
      <category term="Pika" scheme="http://theo.im/tags/pika/"/>
    
  </entry>
  
  <entry>
    <title>解决GitHub Pages的302转向问题</title>
    <link href="http://theo.im/blog/2014/05/14/resolve-302-redirection-on-github-pages/"/>
    <id>http://theo.im/blog/2014/05/14/resolve-302-redirection-on-github-pages/</id>
    <published>2014-05-14T02:34:21.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p><strong>NOTE:</strong> 如果给GitHub Pages使用的是子域名，按照<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages" target="_blank" rel="external">GitHub Pages文档</a>配置，不会出现该问题。</p><p>由于我在GitHub Pages上的搭的博客使用了<code>theo.im</code>这个根域名(Apex Domain)，在按照<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages" target="_blank" rel="external">GitHub Pages文档</a>上提供的信息，对<code>theo.im</code>设置了<strong>A记录</strong>，但是通过执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -I http://theo.im/sitemap.xml</div></pre></td></tr></table></figure><p>发现得到的是302转向，不符合Sitemap协议的要求：</p><blockquote><p>A successful request will return an HTTP 200 response code; if you receive a different response, you should resubmit your request. The HTTP 200 response code only indicates that the search engine has received your Sitemap, not that the Sitemap itself or the URLs contained in it were valid.</p><footer><strong>sitemaps.org</strong><cite><a href="http://www.sitemaps.org/protocol.html" target="_blank" rel="external">Sitemaps Protocol</a></cite></footer></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>通过搜索，我发现需要使用<strong>ALIAS记录</strong>解析根域名，但是由于我之前使用的是<a href="http://dnspod.cn" target="_blank" rel="external">DNSPod</a>的服务，不支持<strong>ALIAS记录</strong>，因此决定换加DNS域名解析商。</p><p>经过一番搜寻，找到了两家支持<strong>ALIAS记录</strong>的DNS域名解析商：</p><ol><li><a href="https://dnsimple.com/" target="_blank" rel="external">DNSimple</a>: 全收费服务</li><li><a href="https://pointhq.com/" target="_blank" rel="external">PointDNS</a>: 有免费的开发者账户</li></ol><p>本着能用收费不用免费的原则，因此我选择了 <a href="https://dnsimple.com/" target="_blank" rel="external">DNSimple</a> 来解析我的域名 (゜o゜(☆○=(-_-)</p><p><img src="http://theo-im.qiniudn.com/images/github-pages-dns-buybuybuy.jpg" alt=""></p><p>OK，万文不如一图：</p><p><img src="http://theo-im.qiniudn.com/images/github-pages-dns-setup.png" alt=""></p><p>最后，运行 <code>dig theo.im +nostats +nocomments +nocmd</code> 检查DNS是否生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.23.rc1.el6_5.1 &lt;&lt;&gt;&gt; theo.im +nostats +nocomments +nocmd</div><div class="line">;; global options: +cmd</div><div class="line">;theo.im.           IN  A</div><div class="line">theo.im.        3600    IN  A   199.27.79.133</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 如果给GitHub Pages使用的是子域名，按照&lt;a href=&quot;https://help.
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="GitHub" scheme="http://theo.im/tags/github/"/>
    
      <category term="DNS" scheme="http://theo.im/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ笔记（二）: 并发连接数</title>
    <link href="http://theo.im/blog/2014/05/13/rabbitmq-note-2-about-simultaneous-connections/"/>
    <id>http://theo.im/blog/2014/05/13/rabbitmq-note-2-about-simultaneous-connections/</id>
    <published>2014-05-13T08:16:21.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>对于服务器来说，并发连接数一直是一个需要考量的问题，因此在这里做一个简单的测试。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在测试前，需要准备一个客户端环境，本文的环境是:</p><ul><li>CentOS 6.3</li><li>Python 2.7.6<ul><li><a href="http://kombu.readthedocs.org/" target="_blank" rel="external">Kombu</a></li></ul></li></ul><p><strong>NOTE:</strong> 下文中的 IP 地址 <code>10.10.0.70</code> 为 RabbitMQ 服务器的 IP 地址</p><h3 id="测试-耗尽-rabbitmq-的-socket-descriptors"><a href="#测试-耗尽-rabbitmq-的-socket-descriptors" class="headerlink" title="测试: 耗尽 rabbitmq 的 socket descriptors"></a>测试: 耗尽 rabbitmq 的 socket descriptors</h3><p>首先, 编写一个脚本:</p><figure class="highlight python"><figcaption><span>exhaust_socket_descriptors.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">import</span> config</div><div class="line"></div><div class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>,</div><div class="line">                    level=logging.INFO)</div><div class="line">LOG = logging.getLogger(os.path.basename(__file__))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    connections = []</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        LOG.info(<span class="string">"Try to establish a new rabbit connection..."</span>)</div><div class="line">        connection = config.get_connection()</div><div class="line">        connection.connect()</div><div class="line">        connections.append(connection)</div><div class="line">        LOG.info(<span class="string">"[%d] connections"</span>, len(connections))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>在<strong>客户端</strong>执行<code>exhaust_socket_descriptors.py</code>, 会看到如下输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...前略...</div><div class="line">2014-05-13 10:45:17,477 - exhaust_socket_descriptors.py - INFO - Try to establish a new rabbit connection...</div><div class="line">2014-05-13 10:45:17,489 - exhaust_socket_descriptors.py - INFO - [826] connections</div><div class="line">2014-05-13 10:45:17,489 - exhaust_socket_descriptors.py - INFO - Try to establish a new rabbit connection...</div><div class="line">2014-05-13 10:45:17,502 - exhaust_socket_descriptors.py - INFO - [827] connections</div><div class="line">2014-05-13 10:45:17,502 - exhaust_socket_descriptors.py - INFO - Try to establish a new rabbit connection...</div><div class="line">2014-05-13 10:45:17,516 - exhaust_socket_descriptors.py - INFO - [828] connections</div><div class="line">2014-05-13 10:45:17,516 - exhaust_socket_descriptors.py - INFO - Try to establish a new rabbit connection...</div><div class="line">2014-05-13 10:45:17,528 - exhaust_socket_descriptors.py - INFO - [829] connections</div><div class="line">2014-05-13 10:45:17,529 - exhaust_socket_descriptors.py - INFO - Try to establish a new rabbit connection...</div></pre></td></tr></table></figure><p>看到似乎是连接耗尽了，在<strong>服务器端</strong>上确认一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost vagrant]# rabbitmqctl status | grep sockets_</div><div class="line">      &#123;sockets_limit,829&#125;,</div><div class="line">      &#123;sockets_used,829&#125;]&#125;,</div></pre></td></tr></table></figure><p><code>sockets_used</code> 与 <code>sockets_limit</code> 相同，可以确认 socket descriptors 耗尽了，因此客户端成功新连接，卡在<code>Try to establish a new rabbit connection...</code> 处。但是问题在于，<strong>为什么不超时？</strong></p><p>在<strong>客户端</strong>中检查一下TCP连接个数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# netstat -atn | grep 10.10.0.70:5672 | wc -l</div><div class="line">830</div></pre></td></tr></table></figure><p>可以得出，socket连接数是830，大于服务器端的<code>sockets_limit</code></p><p>继续，在<strong>客户端</strong>中，检查一下TCP连接状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# netstat -atn | grep 10.10.0.70:5672  | awk &apos;&#123;print $6&#125;&apos; | uniq</div><div class="line">ESTABLISHED</div></pre></td></tr></table></figure><p><strong>全部都是ESTABLISHED状态</strong>，因此服务器仅仅是阻塞了新连接，而不是拒绝新连接。这样，就产生了一个问题：</p><p>如果是使用 <a href="http://clusterlabs.org/" target="_blank" rel="external">HAProxy</a> 等工具搭建的集群，由于<strong>服务器依然会接受新连接</strong>，因此 <a href="http://clusterlabs.org/" target="_blank" rel="external">HAProxy</a> 不会认为节点已Down，<strong>最终会导致整个集群卡住</strong>；</p><h3 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h3><p>当 RabbitMQ 的 <code>sockets_used</code> 达到 <code>sockets_limits</code> 时候（连接数耗尽时），最终即使是 Consumer也会全部阻塞，只有在 <code>sockets_used &lt; sockets_limit</code> 时（释放部分连接后），才会恢复。</p><p>参见以下连接获取更多信息: <a href="http://markmail.org/message/r4yhvqc7vgfljpao" target="_blank" rel="external">http://markmail.org/message/r4yhvqc7vgfljpao</a></p><h2 id="Workaround-增加File-Socket-Descriptors个数"><a href="#Workaround-增加File-Socket-Descriptors个数" class="headerlink" title="Workaround: 增加File/Socket Descriptors个数"></a>Workaround: 增加File/Socket Descriptors个数</h2><p>通过官方(包括EPEL)的 <code>deb</code>, <code>rpm</code> 包安装的启动脚本，都会在<code>rabbitmq-server</code>启动前 <code>source</code> 一次 <code>/etc/default/rabbitmq-server</code> 文件，因此我们可以在该文件中增加最大允许的File/Socket Descriptors 个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'ulimit -n 102400'</span> &gt; /etc/default/rabbitmq-server</div></pre></td></tr></table></figure><p>最后，重启 RabbitMQ 服务器以生效该设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service rabbitmq-server restart</div></pre></td></tr></table></figure><h2 id="Updated"><a href="#Updated" class="headerlink" title="Updated"></a>Updated</h2><h3 id="May-17-2014"><a href="#May-17-2014" class="headerlink" title="May 17, 2014"></a>May 17, 2014</h3><ul><li>更新 Bug 说明 (RabbitMQ <code>bug26180</code>)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;对于服务器来说，并发连接数一直是一个需要考量的问题，因此在这里做一个简单的测试。&lt;/p&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot;
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="RabbitMQ" scheme="http://theo.im/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ笔记（一）: 通过Vagrant建立一个RabbitMQ服务器实验环境</title>
    <link href="http://theo.im/blog/2014/05/13/rabbitmq-note-1-setup-experimental-rabbitmq-environment-using-vagrant/"/>
    <id>http://theo.im/blog/2014/05/13/rabbitmq-note-1-setup-experimental-rabbitmq-environment-using-vagrant/</id>
    <published>2014-05-13T06:46:31.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h2><p>在<a href="http://vagrantup.com" target="_blank" rel="external">官方网站</a>上，下载并安装Vagrant</p><p><strong>NOTE</strong>: Vagrant 1.6版本对<code>CentOS</code>的guest支持不好，不能正确设置网络连接，需要升级到最新版或打上下面这个补丁: <a href="https://github.com/cammoraton/vagrant/commit/1e4584cde51765972af41cd48fc0409756a8fd59" target="_blank" rel="external">Fix issue reported at mitchellh#3649</a></p><h2 id="下载并导入CentOS-6-3-Box"><a href="#下载并导入CentOS-6-3-Box" class="headerlink" title="下载并导入CentOS 6.3 Box"></a>下载并导入CentOS 6.3 Box</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant box add --name centos63 <span class="string">'https://s3.amazonaws.com/itmat-public/centos-6.3-chef-10.14.2.box'</span></div></pre></td></tr></table></figure><h2 id="创建Vagrantfile"><a href="#创建Vagrantfile" class="headerlink" title="创建Vagrantfile"></a>创建Vagrantfile</h2><p><code>Vagrantfile</code> 文件内容如下:</p><figure class="highlight ruby"><figcaption><span>Vagrantfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- mode: ruby -*-</span></div><div class="line"><span class="comment"># vi: set ft=ruby :</span></div><div class="line"></div><div class="line"><span class="comment"># Vagrantfile API/syntax version. Don't touch unless you know what you're doing!</span></div><div class="line">VAGRANTFILE_API_VERSION = <span class="string">"2"</span></div><div class="line"></div><div class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">  config.vm.box = <span class="string">"centos63"</span></div><div class="line"></div><div class="line">  <span class="comment"># 一个Host-Only的Network, IP地址可以自定义, 方便访问</span></div><div class="line">  config.vm.network <span class="symbol">:private_network</span>, <span class="symbol">ip:</span> <span class="string">"10.10.0.70"</span>, <span class="symbol">netmask:</span> <span class="string">"255.255.255.0"</span></div><div class="line"></div><div class="line">  <span class="comment"># config.vm.synced_folder "../", "/vagrant"</span></div><div class="line"></div><div class="line">  config.vm.provider <span class="symbol">:virtualbox</span> <span class="keyword">do</span> <span class="params">|vb|</span></div><div class="line">    <span class="comment"># 调节虚拟机CPU个数</span></div><div class="line">    vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--cpus"</span>, <span class="string">"2"</span>]</div><div class="line">    <span class="comment"># 调节虚拟机内存大小</span></div><div class="line">    vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</div><div class="line">    vb.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--natdnshostresolver1"</span>, <span class="string">"on"</span>]</div><div class="line">    vb.customize [<span class="string">"setextradata"</span>, <span class="symbol">:id</span>, <span class="string">"VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant"</span>, <span class="string">"1"</span>]</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># 自动安装脚本</span></div><div class="line">  config.vm.provision <span class="symbol">:shell</span>, <span class="symbol">path:</span> <span class="string">"provision.sh"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>为了简化安装，提供一个用于自动安装的脚本<code>provision.sh</code>，文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"><span class="comment"># Disable yum fastestmirror plugin</span></div><div class="line">sed -i.backup <span class="string">'s/^enabled=1/enabled=0/'</span> /etc/yum/pluginconf.d/fastestmirror.conf</div><div class="line"><span class="comment"># Change yum mirror (163)</span></div><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base-163.repo http://mirrors.163.com/.help/CentOS6-Base-163.repo</div><div class="line">yum makecache</div><div class="line">yum update</div><div class="line"></div><div class="line"><span class="comment"># Install EPEL repository</span></div><div class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div><div class="line">wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</div><div class="line">rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm</div><div class="line"></div><div class="line"><span class="comment"># Install and start rabbitmq-server</span></div><div class="line">yum -y install rabbitmq-server</div><div class="line"></div><div class="line"><span class="comment">## Automatically start</span></div><div class="line">chkconfig rabbitmq-server on</div><div class="line"></div><div class="line"><span class="comment">## Create a sample config and enable guest user remote access</span></div><div class="line"><span class="built_in">echo</span> &gt; /etc/rabbitmq/rabbitmq.config &lt;&lt;EOF</div><div class="line">[</div><div class="line">  &#123;rabbit, [</div><div class="line">    &#123;loopback_users, []&#125;</div><div class="line">  ]&#125;</div><div class="line">].</div><div class="line">EOF</div><div class="line"></div><div class="line"><span class="comment">## Enable magement plugin</span></div><div class="line">/usr/lib/rabbitmq/bin/rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</div><div class="line"></div><div class="line"><span class="comment">## Start rabbitmq-server</span></div><div class="line">service rabbitmq-server start</div><div class="line"></div><div class="line"><span class="comment"># Disable iptables</span></div><div class="line">service iptables stop</div><div class="line">chkconfig iptables off</div></pre></td></tr></table></figure><h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant up</div></pre></td></tr></table></figure><h2 id="使用SSH连接到虚拟机"><a href="#使用SSH连接到虚拟机" class="headerlink" title="使用SSH连接到虚拟机"></a>使用SSH连接到虚拟机</h2><p>使用命令(如果支持的话):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant ssh</div></pre></td></tr></table></figure><p>或使用SSH工具，例如 <a href="http://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="external">XShell</a>, <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">PuTTY</a> 等工具，连接到 <code>10.10.0.70:22</code> (IP在之前 <code>Vagrantfile</code> 中定义)</p><h2 id="停止虚拟机"><a href="#停止虚拟机" class="headerlink" title="停止虚拟机"></a>停止虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant halt</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Vagrant&quot;&gt;&lt;a href=&quot;#安装Vagrant&quot; class=&quot;headerlink&quot; title=&quot;安装Vagrant&quot;&gt;&lt;/a&gt;安装Vagrant&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://vagrantup.com&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="RabbitMQ" scheme="http://theo.im/tags/rabbitmq/"/>
    
      <category term="Vagrant" scheme="http://theo.im/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>From Octopress To Hexo</title>
    <link href="http://theo.im/blog/2014/05/13/from-octopress-to-hexo/"/>
    <id>http://theo.im/blog/2014/05/13/from-octopress-to-hexo/</id>
    <published>2014-05-13T06:18:50.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a long time, <a href="http://octopress.org/" target="_blank" rel="external">Octopress</a> is slow and painful to setup, after the death of my silly hard drive, I’m too lazy so I give up setting a Octopress environment, even writing new posts.</p><p>Eventually, I’m levaing, heading for <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>.</p><h2 id="What’s-Hexo"><a href="#What’s-Hexo" class="headerlink" title="What’s Hexo?"></a>What’s Hexo?</h2><p>Hexo is a fast, simple and powerful blog framework. It parses your posts with <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a> or other render engine and generates static files with the beautiful theme. All of these just take seconds.</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><ul><li>Painless installing</li><li>Cleaner <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a></li><li>Simple configuration</li><li>Fast generating, deploying</li><li>Easy customization</li><li>Actively maintained</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s been a long time, &lt;a href=&quot;http://octopress.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octopress&lt;/a&gt; is slow and painful to setup, after t
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Hexo" scheme="http://theo.im/tags/hexo/"/>
    
      <category term="GitHub" scheme="http://theo.im/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>双轴倾角传感器计算坡度</title>
    <link href="http://theo.im/blog/2012/12/29/calculating-gradient-form-two-axis-inclinometer/"/>
    <id>http://theo.im/blog/2012/12/29/calculating-gradient-form-two-axis-inclinometer/</id>
    <published>2012-12-29T11:30:00.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>令 $x$ 轴, $y$ 轴上的转角分别为 $\alpha, \beta$, 平面坡度为 $\theta$, 则:</p><p>$$\begin{align}  \theta = \arccos({    \frac      {1}      {\sqrt{        \tan^2{\alpha} + \tan^2{\beta} + 1      }}  })\end{align}$$</p><p>最近拿了个双轴倾角传感器玩玩，把公式和示例代码记下来备忘。</p><p>推导过程就省略了，下面是C语言描述的示例代码，其中 <code>calc_gradient_from_pitch_roll()</code> 函数的参数和返回值都是<strong>弧度</strong>。</p><figure class="highlight c"><figcaption><span>坡度计算示例代码</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MATH_PI     (3.14159f)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEGREES_TO_RADIANS(angle)       ((angle) * ((MATH_PI) / 180.0f))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIANS_TO_DEGREES(radians)     ((radians) * (180.0f / (MATH_PI)))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">calc_gradient_from_pitch_roll</span><span class="params">(<span class="keyword">float</span> pitch, <span class="keyword">float</span> roll)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">float</span> tan_pitch = <span class="built_in">tan</span>(pitch);</div><div class="line">    <span class="keyword">float</span> tan_roll  = <span class="built_in">tan</span>(roll);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="number">1.0f</span> / <span class="built_in">sqrt</span>(tan_pitch * tan_pitch + tan_roll * tan_roll + <span class="number">1.0f</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Test</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">float</span> deg_pitch, deg_roll;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"(in degress) pitch,roll = "</span>);</div><div class="line">        <span class="keyword">int</span> ret = <span class="built_in">scanf</span>(<span class="string">"%f,%f"</span>, &amp;deg_pitch, &amp;deg_roll);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ret == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">float</span> pitch    = DEGREES_TO_RADIANS(deg_pitch);</div><div class="line">            <span class="keyword">float</span> roll     = DEGREES_TO_RADIANS(deg_roll);</div><div class="line">            <span class="keyword">float</span> gradient = calc_gradient_from_pitch_roll(pitch, roll);</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"(in degress) gradient = %f\n"</span>, RADIANS_TO_DEGREES(gradient));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == EOF) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Print error message and clear the input buffer</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Illegal input\n"</span>);</div><div class="line">            setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;令 $x$ 轴, $y$ 轴上的转角分别为 $\alpha, \beta$, 平面坡度为 $\theta$, 则:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
  \theta = \arccos({
    \frac
      {1}
      {\sqrt{

      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Hardware" scheme="http://theo.im/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>$\LaTeX$ Support in OmniMarkupPreviewer</title>
    <link href="http://theo.im/blog/2012/11/03/latex-support-in-omnimarkuppreviewer/"/>
    <id>http://theo.im/blog/2012/11/03/latex-support-in-omnimarkuppreviewer/</id>
    <published>2012-11-03T04:41:00.000Z</published>
    <updated>2016-05-21T16:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>With the release of <a href="http://theo.im/OmniMarkupPreviewer/">OmniMarkupPreviewer</a> <code>v1.6</code>, you can embed $\LaTeX$ and MathML equations directly into your Markdown documents. Equations are handled with the excellent <a href="http://www.mathjax.org/" target="_blank" rel="external">MathJax</a> library.</p><a id="more"></a><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>In order to enable MathJax, you have to set <code>&quot;mathjax_enabled&quot;</code> to <code>true</code> in your OmniMarkupPreviewer settings. MathJax will be downloaded automatically in the background, so hold on.</p><p><code>OmniMarkupPreviewer.sublime-settings</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"mathjax_enabled"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>NOTE (Linux)</strong>For linux users, because ssl module is missing from Linux version of <a href="http://sublimetext.com/2" target="_blank" rel="external">Sublime Text 2</a>, you have to download and extract MathJax library manually:</p><p>Download the MathJax archive:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c https://github.com/downloads/timonwong/OmniMarkupPreviewer/mathjax.zip</div></pre></td></tr></table></figure><p>Extract to <code>${packages}/OmniMarkupPreviewer/public/</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip mathjax.zip <span class="_">-d</span> ~/.config/sublime-text-2/Packages/OmniMarkupPreviewer/public</div></pre></td></tr></table></figure><p>Create an empty file named <code>.MATHJAX.DOWNLOADED</code> in the plugin folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/.config/sublime-text-2/Packages/OmniMarkupPreviewer/.MATHJAX.DOWNLOADED</div></pre></td></tr></table></figure><p>After MathJax is installed successfully, you have to <strong>reload</strong> your browser to apply the changes.</p><h3 id="Writing-Equations"><a href="#Writing-Equations" class="headerlink" title="Writing Equations"></a>Writing Equations</h3><h4 id="Inline-Equations"><a href="#Inline-Equations" class="headerlink" title="Inline Equations"></a>Inline Equations</h4><p>Enclose your euqation in <code>$</code> delimiters to include an inline $\LaTeX$ equation, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This expression $\sqrt&#123;3x-1&#125;+(1+x)^2$ is an example of a $\LaTeX$ inline equation.</div></pre></td></tr></table></figure><p>This expression $\sqrt{3x-1}+(1+x)^2$ is an example of a $\LaTeX$ inline equation.</p><p>Alternatively, native MathJax delimiter for inline math (<code>\(</code> and <code>\)</code>) is also supported.</p><h4 id="Display-Equations"><a href="#Display-Equations" class="headerlink" title="Display Equations"></a>Display Equations</h4><p>To include a $\LaTeX$ display equation you have to enclose the equation in <code>$$</code> delimiters, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">The Lorenz Equations:</div><div class="line"></div><div class="line">$$</div><div class="line">\begin&#123;aligned&#125;</div><div class="line">\dot&#123;x&#125; &amp; = \sigma(y-x) \\</div><div class="line">\dot&#123;y&#125; &amp; = \rho x - y - xz \\</div><div class="line">\dot&#123;z&#125; &amp; = -\beta z + xy</div><div class="line">\end&#123;aligned&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>$$\begin{aligned}\dot{x} & = \sigma(y-x) \\\dot{y} & = \rho x - y - xz \\\dot{z} & = -\beta z + xy\end{aligned}$$<p>The alternative syntax of native MathJax delimiter for display math (<code>\[</code> and <code>\]</code>) is also provided.</p><h4 id="MathML-Equations"><a href="#MathML-Equations" class="headerlink" title="MathML Equations"></a>MathML Equations</h4><p>You can alsow insert MathML euqations, just wrap your equation inside the standard <code>&lt;math&gt;</code> tag:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1998/Math/MathML"</span> <span class="attr">display</span>=<span class="string">"block"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>P<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>E<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mrow</span> <span class="attr">class</span>=<span class="string">"MJX-TeXAtom-ORD"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mfenced</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mfrac</span> <span class="attr">linethickness</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>n<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mi</span>&gt;</span>k<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">mfrac</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mfenced</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">msup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>p<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>k<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">msup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mn</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2212;<span class="comment">&lt;!-- − --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mi</span>&gt;</span>p<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">msup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mo</span> <span class="attr">stretchy</span>=<span class="string">"false"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mrow</span> <span class="attr">class</span>=<span class="string">"MJX-TeXAtom-ORD"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mi</span>&gt;</span>n<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mo</span>&gt;</span>&amp;#x2212;<span class="comment">&lt;!-- − --&gt;</span><span class="tag">&lt;/<span class="name">mo</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mi</span>&gt;</span>k<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mrow</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">msup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Prologue&quot;&gt;&lt;a href=&quot;#Prologue&quot; class=&quot;headerlink&quot; title=&quot;Prologue&quot;&gt;&lt;/a&gt;Prologue&lt;/h2&gt;&lt;p&gt;With the release of &lt;a href=&quot;http://theo.im/OmniMarkupPreviewer/&quot;&gt;OmniMarkupPreviewer&lt;/a&gt; &lt;code&gt;v1.6&lt;/code&gt;, you can embed $\LaTeX$ and MathML equations directly into your Markdown documents. Equations are handled with the excellent &lt;a href=&quot;http://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MathJax&lt;/a&gt; library.&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Sublime Text 2" scheme="http://theo.im/tags/sublime-text-2/"/>
    
      <category term="Sublime Text 3" scheme="http://theo.im/tags/sublime-text-3/"/>
    
      <category term="OmniMarkupPreviewer" scheme="http://theo.im/tags/omnimarkuppreviewer/"/>
    
  </entry>
  
  <entry>
    <title>Directory comparison for git difftool, with Beyond Compare 3</title>
    <link href="http://theo.im/blog/2012/10/27/directory-comparison-for-git-difftool/"/>
    <id>http://theo.im/blog/2012/10/27/directory-comparison-for-git-difftool/</id>
    <published>2012-10-27T15:02:00.000Z</published>
    <updated>2016-05-21T15:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>For a long time, I didn’t know a way to do directory comparison using git difftool command, <a href="http://mercurial.selenic.com/wiki/ExtdiffExtension" target="_blank" rel="external">extdiff extension</a> from Mercurial did perform much more superior than Git.</p><p>Though it may be a bit out of date, I just found that after <code>v1.7.11</code>, Git now supports directory comparison through <code>--dir-diff</code> option, fantastic!</p><p><strong>UPDATE 12/11/2012:</strong> You will need v1.8.0 version of <a href="http://code.google.com/p/msysgit/downloads/list" target="_blank" rel="external">msysgit</a> installed, as noted by <strong>Scooter Software</strong> (<a href="http://www.scootersoftware.com/vbulletin/showthread.php?t=9449" target="_blank" rel="external">Reference</a>).</p><p>So here is a list of steps for me to make Beyond Compare 3 and Git directory comparison work under Windows.</p><p>First of all, Execute following commands in the <code>Git Bash</code> shell (or just modify your .gitconfig directly). You may need to change the folder where <code>BCompare.exe</code> resides.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global diff.tool bc3</div><div class="line">git config --global difftool.bc3.cmd &quot;\&quot;c:/Program Files/Beyond Compare 3/BCompare.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;&quot;</div><div class="line">git config --global difftool.prompt false</div></pre></td></tr></table></figure><p><strong>NOTE:</strong> Instead of <code>bcomp.exe</code>, use <code>BCompare.exe</code>, because I’ve found <code>bcomp.exe</code> returns too early, which will cause errors like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">...Git/libexec/git-core\git-difftool line 444: Bad file number</div></pre></td></tr></table></figure><p>Then make an alias for difftool:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.dt &quot;difftool --dir-diff&quot;</div></pre></td></tr></table></figure><p>Now, you can use <code>git dt</code> to open Beyond Compare 3 for directory comparison in git repositories.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For a long time, I didn’t know a way to do directory comparison using git difftool command, &lt;a href=&quot;http://mercurial.selenic.com/wiki/Ex
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Git" scheme="http://theo.im/tags/git/"/>
    
      <category term="Beyond Compare 3" scheme="http://theo.im/tags/beyond-compare-3/"/>
    
  </entry>
  
  <entry>
    <title>Workaround: Failed to import unicodedata in Sublime Text 2 under Windows</title>
    <link href="http://theo.im/blog/2012/10/25/workaround-failed-to-import-unicodedata-in-sublime-text-2-under-windows/"/>
    <id>http://theo.im/blog/2012/10/25/workaround-failed-to-import-unicodedata-in-sublime-text-2-under-windows/</id>
    <published>2012-10-25T05:36:00.000Z</published>
    <updated>2017-10-14T15:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s weird, while importing some .pyd modules, like pyexpat, unicodedata in Windows version of <a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text 2</a>, you will get <code>ImportError</code>, for example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unicodedata</div></pre></td></tr></table></figure><p>Will result in:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Import Error: No module named unicodedata</div></pre></td></tr></table></figure><p>However, since standard pyd modules are not missing, reside correctly in the same folder as sublime_text.exe, we can add that folder to sys.path in order to allow embedded python interpreter to load these modules:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys.path.insert(os.path.dirname(sys.executable))</div></pre></td></tr></table></figure><p>After that, you can import these standard python modules without pain, I hope it’s useful for Sublime Text 2 packages developers who met the same problem before.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s weird, while importing some .pyd modules, like pyexpat, unicodedata in Windows version of &lt;a href=&quot;http://www.sublimetext.com/2&quot; tar
      
    
    </summary>
    
      <category term="IT" scheme="http://theo.im/blog/categories/it/"/>
    
    
      <category term="Sublime Text 2" scheme="http://theo.im/tags/sublime-text-2/"/>
    
      <category term="Python" scheme="http://theo.im/tags/python/"/>
    
  </entry>
  
</feed>
